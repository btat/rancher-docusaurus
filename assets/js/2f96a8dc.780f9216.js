"use strict";(self.webpackChunkrancher_docusaurus=self.webpackChunkrancher_docusaurus||[]).push([[6696],{3905:function(e,t,n){n.d(t,{Zo:function(){return i},kt:function(){return g}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},i=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,i=u(e,["components","mdxType","originalType","parentName"]),m=s(n),g=o,d=m["".concat(p,".").concat(g)]||m[g]||c[g]||l;return n?a.createElement(d,r(r({ref:t},i),{},{components:n})):a.createElement(d,r({ref:t},i))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=m;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u.mdxType="string"==typeof e?e:o,r[1]=u;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6247:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return i},default:function(){return m}});var a=n(87462),o=n(63366),l=(n(67294),n(3905)),r=["components"],u={title:"Outputs and ClusterOutputs",position:2},p=void 0,s={unversionedId:"logging/custom-resource-config/outputs",id:"version-2.5.9/logging/custom-resource-config/outputs",isDocsHomePage:!1,title:"Outputs and ClusterOutputs",description:"For the full details on configuring Outputs and ClusterOutputs, see the Banzai Cloud Logging operator documentation.",source:"@site/versioned_docs/version-2.5.9/logging/custom-resource-config/outputs.md",sourceDirName:"logging/custom-resource-config",slug:"/logging/custom-resource-config/outputs",permalink:"/rancher-docusaurus/2.5.9/logging/custom-resource-config/outputs",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-2.5.9/logging/custom-resource-config/outputs.md",tags:[],version:"2.5.9",frontMatter:{title:"Outputs and ClusterOutputs",position:2},sidebar:"version-2.5.9/tutorialSidebar",previous:{title:"Custom Resource Configuration",permalink:"/rancher-docusaurus/2.5.9/logging/custom-resource-config/index"},next:{title:"rancher-logging Helm Chart Options",permalink:"/rancher-docusaurus/2.5.9/logging/helm-chart-options"}},i=[{value:"Cluster Output to ElasticSearch",id:"cluster-output-to-elasticsearch",children:[]},{value:"Output to Splunk",id:"output-to-splunk",children:[]},{value:"Output to Syslog",id:"output-to-syslog",children:[]},{value:"Unsupported Outputs",id:"unsupported-outputs",children:[]}],c={toc:i};function m(e){var t=e.components,n=(0,o.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"For the full details on configuring ",(0,l.kt)("inlineCode",{parentName:"p"},"Outputs")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ClusterOutputs"),", see the ",(0,l.kt)("a",{parentName:"p",href:"https://banzaicloud.com/docs/one-eye/logging-operator/configuration/output/"},"Banzai Cloud Logging operator documentation.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#configuration"},"Configuration")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#yaml-examples"},"YAML Examples"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#cluster-output-to-elasticsearch"},"Cluster Output to ElasticSearch")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#output-to-splunk"},"Output to Splunk")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#output-to-syslog"},"Output to Syslog")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#unsupported-outputs"},"Unsupported Outputs"))))),(0,l.kt)("h1",{id:"configuration"},"Configuration"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#outputs"},"Outputs")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#clusteroutputs"},"ClusterOutputs"))),(0,l.kt)("h1",{id:"outputs"},"Outputs"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Output")," resource defines where your ",(0,l.kt)("inlineCode",{parentName:"p"},"Flows")," can send the log messages. ",(0,l.kt)("inlineCode",{parentName:"p"},"Outputs")," are the final stage for a logging ",(0,l.kt)("inlineCode",{parentName:"p"},"Flow"),"."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Output")," is a namespaced resource, which means only a ",(0,l.kt)("inlineCode",{parentName:"p"},"Flow")," within the same namespace can access it."),(0,l.kt)("p",null,"You can use secrets in these definitions, but they must also be in the same namespace. "),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Outputs")," can be configured by filling out forms in the Rancher UI."),(0,l.kt)("p",null,"For the details of ",(0,l.kt)("inlineCode",{parentName:"p"},"Output")," custom resource, see ",(0,l.kt)("a",{parentName:"p",href:"https://banzaicloud.com/docs/one-eye/logging-operator/configuration/crds/v1beta1/output_types/"},"OutputSpec.")),(0,l.kt)("p",null,"The Rancher UI provides forms for configuring the following ",(0,l.kt)("inlineCode",{parentName:"p"},"Output")," types:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Amazon ElasticSearch"),(0,l.kt)("li",{parentName:"ul"},"Azure Storage"),(0,l.kt)("li",{parentName:"ul"},"Cloudwatch"),(0,l.kt)("li",{parentName:"ul"},"Datadog"),(0,l.kt)("li",{parentName:"ul"},"Elasticsearch"),(0,l.kt)("li",{parentName:"ul"},"File"),(0,l.kt)("li",{parentName:"ul"},"Fluentd"),(0,l.kt)("li",{parentName:"ul"},"GCS"),(0,l.kt)("li",{parentName:"ul"},"Kafka"),(0,l.kt)("li",{parentName:"ul"},"Kinesis Stream"),(0,l.kt)("li",{parentName:"ul"},"LogDNA"),(0,l.kt)("li",{parentName:"ul"},"LogZ"),(0,l.kt)("li",{parentName:"ul"},"Loki"),(0,l.kt)("li",{parentName:"ul"},"New Relic"),(0,l.kt)("li",{parentName:"ul"},"Splunk"),(0,l.kt)("li",{parentName:"ul"},"SumoLogic"),(0,l.kt)("li",{parentName:"ul"},"Syslog")),(0,l.kt)("p",null,"The Rancher UI provides forms for configuring the ",(0,l.kt)("inlineCode",{parentName:"p"},"Output")," type, target, and access credentials if applicable."),(0,l.kt)("p",null,"For example configuration for each logging plugin supported by the logging operator, see the ",(0,l.kt)("a",{parentName:"p",href:"https://banzaicloud.com/docs/one-eye/logging-operator/configuration/plugins/outputs/"},"logging operator documentation.")),(0,l.kt)("h1",{id:"clusteroutputs"},"ClusterOutputs"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ClusterOutput")," defines an ",(0,l.kt)("inlineCode",{parentName:"p"},"Output")," without namespace restrictions. It is only effective when deployed in the same namespace as the logging operator."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ClusterOutputs")," can be configured by filling out forms in the Rancher UI."),(0,l.kt)("p",null,"For the details of the ",(0,l.kt)("inlineCode",{parentName:"p"},"ClusterOutput")," custom resource, see ",(0,l.kt)("a",{parentName:"p",href:"https://banzaicloud.com/docs/one-eye/logging-operator/configuration/crds/v1beta1/clusteroutput_types/"},"ClusterOutput.")),(0,l.kt)("h1",{id:"yaml-examples"},"YAML Examples"),(0,l.kt)("p",null,"Once logging is installed, you can use these examples to help craft your own logging pipeline."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#cluster-output-to-elasticsearch"},"Cluster Output to ElasticSearch")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#output-to-splunk"},"Output to Splunk")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#output-to-syslog"},"Output to Syslog")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#unsupported-outputs"},"Unsupported Outputs"))),(0,l.kt)("h3",{id:"cluster-output-to-elasticsearch"},"Cluster Output to ElasticSearch"),(0,l.kt)("p",null,"Let's say you wanted to send all logs in your cluster to an ",(0,l.kt)("inlineCode",{parentName:"p"},"elasticsearch")," cluster. First, we create a cluster ",(0,l.kt)("inlineCode",{parentName:"p"},"Output"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: logging.banzaicloud.io/v1beta1\nkind: ClusterOutput\nmetadata:\n    name: "example-es"\n    namespace: "cattle-logging-system"\nspec:\n    elasticsearch:\n      host: elasticsearch.example.com\n      port: 9200\n      scheme: http\n')),(0,l.kt)("p",null,"We have created this ",(0,l.kt)("inlineCode",{parentName:"p"},"ClusterOutput"),", without elasticsearch configuration, in the same namespace as our operator: ",(0,l.kt)("inlineCode",{parentName:"p"},"cattle-logging-system."),". Any time we create a ",(0,l.kt)("inlineCode",{parentName:"p"},"ClusterFlow")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"ClusterOutput"),", we have to put it in the ",(0,l.kt)("inlineCode",{parentName:"p"},"cattle-logging-system")," namespace."),(0,l.kt)("p",null,"Now that we have configured where we want the logs to go, let's configure all logs to go to that ",(0,l.kt)("inlineCode",{parentName:"p"},"ClusterOutput"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: logging.banzaicloud.io/v1beta1\nkind: ClusterFlow\nmetadata:\n    name: "all-logs"\n    namespace: "cattle-logging-system"\nspec:\n  globalOutputRefs:\n    - "example-es"\n')),(0,l.kt)("p",null,"We should now see our configured index with logs in it."),(0,l.kt)("h3",{id:"output-to-splunk"},"Output to Splunk"),(0,l.kt)("p",null,"What if we have an application team who only wants logs from a specific namespaces sent to a ",(0,l.kt)("inlineCode",{parentName:"p"},"splunk")," server? For this case, we can use namespaced ",(0,l.kt)("inlineCode",{parentName:"p"},"Outputs")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Flows"),"."),(0,l.kt)("p",null,"Before we start, let's set up that team's application: ",(0,l.kt)("inlineCode",{parentName:"p"},"coolapp"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: devteam\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: coolapp\n  namespace: devteam\n  labels:\n    app: coolapp\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: coolapp\n  template:\n    metadata:\n      labels:\n        app: coolapp\n    spec:\n      containers:\n        - name: generator\n          image: paynejacob/loggenerator:latest\n")),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"coolapp")," running, we will follow a similar path as when we created a ",(0,l.kt)("inlineCode",{parentName:"p"},"ClusterOutput"),". However, unlike ",(0,l.kt)("inlineCode",{parentName:"p"},"ClusterOutputs"),", we create our ",(0,l.kt)("inlineCode",{parentName:"p"},"Output")," in our application's namespace."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: logging.banzaicloud.io/v1beta1\nkind: Output\nmetadata:\n    name: "devteam-splunk"\n    namespace: "devteam"\nspec:\n    SplunkHec:\n        host: splunk.example.com\n        port: 8088\n        protocol: http\n')),(0,l.kt)("p",null,"Once again, let's feed our ",(0,l.kt)("inlineCode",{parentName:"p"},"Output")," some logs:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: logging.banzaicloud.io/v1beta1\nkind: Flow\nmetadata:\n    name: "devteam-logs"\n    namespace: "devteam"\nspec:\n  localOutputRefs:\n    - "devteam-splunk"\n')),(0,l.kt)("h3",{id:"output-to-syslog"},"Output to Syslog"),(0,l.kt)("p",null,"Let's say you wanted to send all logs in your cluster to an ",(0,l.kt)("inlineCode",{parentName:"p"},"syslog")," server. First, we create a ",(0,l.kt)("inlineCode",{parentName:"p"},"ClusterOutput"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: logging.banzaicloud.io/v1beta1\n    kind: ClusterOutput\n    metadata:\n      name: "example-syslog"\n      namespace: "cattle-logging-system"\n    spec:\n      syslog:\n        buffer:\n          timekey: 30s\n          timekey_use_utc: true\n          timekey_wait: 10s\n          flush_interval: 5s\n        format:\n          type: json\n          app_name_field: test\n        host: syslog.example.com\n        insecure: true\n        port: 514\n        transport: tcp\n')),(0,l.kt)("p",null,"Now that we have configured where we want the logs to go, let's configure all logs to go to that ",(0,l.kt)("inlineCode",{parentName:"p"},"Output"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: logging.banzaicloud.io/v1beta1\n    kind: ClusterFlow\n    metadata:\n      name: "all-logs"\n      namespace: cattle-logging-system\n    spec:\n      globalOutputRefs:\n        - "example-syslog"\n')),(0,l.kt)("h3",{id:"unsupported-outputs"},"Unsupported Outputs"),(0,l.kt)("p",null,"For the final example, we create an ",(0,l.kt)("inlineCode",{parentName:"p"},"Output")," to write logs to a destination that is not supported out of the box:"),(0,l.kt)("p",null,">"," ",(0,l.kt)("strong",{parentName:"p"},"Note on syslog")," ",(0,l.kt)("inlineCode",{parentName:"p"},"syslog")," is a supported ",(0,l.kt)("inlineCode",{parentName:"p"},"Output"),". However, this example still provides an overview on using unsupported plugins."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Secret\nmetadata:\n  name: syslog-config\n  namespace: cattle-logging-system\ntype: Opaque\nstringData:\n  fluent-bit.conf: |\n    [INPUT]\n        Name              forward\n        Port              24224\n\n    [OUTPUT]\n        Name              syslog\n        InstanceName      syslog-output\n        Match             *\n        Addr              syslog.example.com\n        Port              514\n        Cluster           ranchers\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fluentbit-syslog-forwarder\n  namespace: cattle-logging-system\n  labels:\n    output: syslog\nspec:\n  selector:\n    matchLabels:\n      output: syslog\n  template:\n    metadata:\n      labels:\n        output: syslog\n    spec:\n      containers:\n      - name: fluentbit\n        image: paynejacob/fluent-bit-out-syslog:latest\n        ports:\n          - containerPort: 24224\n        volumeMounts:\n          - mountPath: "/fluent-bit/etc/"\n            name: configuration\n      volumes:\n      - name: configuration\n        secret:\n          secretName: syslog-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: syslog-forwarder\n  namespace: cattle-logging-system\nspec:\n  selector:\n    output: syslog\n  ports:\n    - protocol: TCP\n      port: 24224\n      targetPort: 24224\n---\napiVersion: logging.banzaicloud.io/v1beta1\nkind: ClusterFlow\nmetadata:\n  name: all-logs\n  namespace: cattle-logging-system\nspec:\n  globalOutputRefs:\n    - syslog\n---\napiVersion: logging.banzaicloud.io/v1beta1\nkind: ClusterOutput\nmetadata:\n  name: syslog\n  namespace: cattle-logging-system\nspec:\n  forward:\n    servers:\n      - host: "syslog-forwarder.cattle-logging-system"\n    require_ack_response: false\n    ignore_network_errors_at_startup: false\n')),(0,l.kt)("p",null,"Let's break down what is happening here. First, we create a deployment of a container that has the additional ",(0,l.kt)("inlineCode",{parentName:"p"},"syslog")," plugin and accepts logs forwarded from another ",(0,l.kt)("inlineCode",{parentName:"p"},"fluentd"),". Next we create an ",(0,l.kt)("inlineCode",{parentName:"p"},"Output")," configured as a forwarder to our deployment. The deployment ",(0,l.kt)("inlineCode",{parentName:"p"},"fluentd")," will then forward all logs to the configured ",(0,l.kt)("inlineCode",{parentName:"p"},"syslog")," destination."))}m.isMDXComponent=!0}}]);